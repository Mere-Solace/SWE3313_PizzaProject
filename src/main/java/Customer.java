import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.LinkedList;

/**
 * The Customer class represents a customer with personal details and account information.
 * It provides methods to manage customer data such as name, email, password, address, and phone numbers.
 * Additionally, it includes functionality for managing saved payment methods.
 */
public class Customer {
	// Static counter for generating unique user IDs
	private static int idCounter;
	// Instance variables for customer details
	private final int userID;
	private String name;
	private String email;
	private String password;
	private String address;
	private final LinkedList<String> phoneNumbers = new LinkedList<>();
	private final LinkedList<Payment> savedPaymentMethods = new LinkedList<>();

	/**
	 * Constructs a new customer with basic details and generates a unique user ID.
	 * The user ID is generated by reading the highest ID from the existing customer records.
	 *
	 * @param name        The customer's name.
	 * @param email       The customer's email address.
	 * @param password    The customer's password.
	 * @param address     The customer's address.
	 * @param phoneNumber The customer's phone number.
	 */
	Customer(String name, String email, String password, String address, String phoneNumber) {
		// Reads the customerRecords file to find the highest ID
		File file = new File("src/main/resources/customerRecords.txt");
		try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
			String line;
			int maxID = -1;

			// Iterates through the file to determine the next available ID
			while ((line = reader.readLine()) != null) {
				String[] fields = line.split(",");
				int id = Integer.parseInt(fields[0]);
				maxID = Math.max(maxID, id);
			}

			// Sets ID counter based on the highest ID found
			if (maxID == -1)
				idCounter = 1000000;
			else
				idCounter = maxID + 1;
		} catch (IOException e) {
			// Sets a default ID in case of an error
			idCounter = 1000000;
		}

		// Assigns customer ID and increments ID counter for next customer
		userID = idCounter;
		idCounter++;
		this.name = name;
		this.email = email;
		this.password = password;
		this.address = address;
		phoneNumbers.addFirst(phoneNumber);
	}

	/**
	 * Constructs a customer object from database entry (with pre-existing userID).
	 *
	 * @param userID      The customer's unique user ID.
	 * @param name        The customer's name.
	 * @param email       The customer's email address.
	 * @param password    The customer's password.
	 * @param address     The customer's address.
	 * @param phoneNumbers A list of the customer's phone numbers.
	 */
	Customer(int userID, String name, String email, String password, String address, LinkedList<String> phoneNumbers) {
		this.userID = userID;
		idCounter++;
		this.name = name;
		this.email = email;
		this.password = password;
		this.address = address;
		this.phoneNumbers.addAll(phoneNumbers);
	}

	/**
	 * Retrieves the user's unique ID.
	 *
	 * @return The user's unique ID.
	 */
	public int getUserID() {
		return userID;
	}

	/**
	 * Retrieves the customer's name.
	 *
	 * @return The customer's name.
	 */
	public String getName() {
		return name;
	}

	/**
	 * Retrieves the customer's name.
	 *
	 * @return The customer's name.
	 */
	public void setName(String name) {
		this.name = name;
	}

	/**
	 * Retrieves the customer's email address.
	 *
	 * @return The customer's email address.
	 */
	public String getEmail() {
		return email;
	}

	/**
	 * Sets the customer's email address.
	 *
	 * @param email The new email address for the customer.
	 */
	public void setEmail(String email) {
		this.email = email;
	}

	/**
	 * Compares the provided password with the stored password.
	 *
	 * @param password The password to be checked.
	 * @return true if the password matches, false otherwise.
	 */
	public boolean checkPassword(String password) {
		return this.password.equals(password);
	}

	/**
	 * Sets the customer's password.
	 *
	 * @param password The new password for the customer.
	 */
	public void setPassword(String password) {
		this.password = password;
	}

	/**
	 * Retrieves the customer's address.
	 *
	 * @return The customer's address.
	 */
	public String getAddress() {
		return address;
	}

	/**
	 * Sets the customer's address.
	 *
	 * @param address The new address for the customer.
	 */
	public void setAddress(String address) {
		this.address = address;
	}

	/**
	 * Retrieves the list of phone numbers associated with the customer.
	 *
	 * @return A list of the customer's phone numbers.
	 */
	public LinkedList<String> getPhoneNumbers() {
		return phoneNumbers;
	}

	/**
	 * Retrieves a specific phone number by index.
	 *
	 * @param index The index of the phone number in the list.
	 * @return The phone number at the specified index.
	 */
	public String getPhoneNumberAtIndex(int index) {
		return phoneNumbers.get(index);
	}

	/**
	 * Adds a new phone number to the customer's list of phone numbers if it does not already exist.
	 *
	 * @param phoneNumber The phone number to be added.
	 * @return true if the phone number was added, false if it already exists.
	 */
	public boolean addPhoneNumber(String phoneNumber) {
		if (phoneNumbers.contains(phoneNumber))
			return false;
		phoneNumbers.addLast(phoneNumber);
		return true;
	}

	/**
	 * Removes a phone number from the customer's list of phone numbers if it exists.
	 *
	 * @param phoneNumber The phone number to be removed.
	 * @return true if the phone number was removed, false if it was not found.
	 */
	public boolean removePhoneNumber(String phoneNumber) {
		if (phoneNumbers.contains(phoneNumber)) {
			phoneNumbers.remove(phoneNumber);
			return true;
		}
		else
			return false;
	}

	/**
	 * Returns a string representation of the customer, including all relevant details.
	 * This format is suitable for saving to a file or database.
	 *
	 * @return A string representing the customer.
	 */
	@Override
	public String toString() {
		return userID + "," +
				name + "," +
				email + "," +
				password + "," +
				address + "," +
				String.join(";", phoneNumbers);
	}
}